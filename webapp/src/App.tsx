import { useEffect, useState } from "react";
import MapView from "./MapView";
import QrScanner from "./QrScanner";
import { fetchRoute, checkQRCode, Checkpoint } from "./api";

declare global {
  interface Window {
    Telegram: any;
  }
}

export default function App() {
  const [checkpoints, setCheckpoints] = useState<Checkpoint[]>([]);
  const [userPos, setUserPos] = useState<[number, number] | null>(null);
  const [scanning, setScanning] = useState(false);
  const tg = window.Telegram?.WebApp;

  useEffect(() => {
    tg?.ready();
    navigator.geolocation.watchPosition(
      (pos) => {
        const { latitude, longitude } = pos.coords;
        setUserPos([latitude, longitude]);
      },
      () => tg?.showAlert("–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"),
      { enableHighAccuracy: true }
    );
    fetchRoute(1).then(setCheckpoints).catch(() => tg?.showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞"));
  }, []);

  function handleScan(result: string) {
    setScanning(false);
    const userId = tg?.initDataUnsafe?.user?.id;
    if (!userId) {
      tg?.showAlert("–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω user_id");
      return;
    }
    checkQRCode(userId.toString(), result)
      .then((msg) => tg?.showAlert("‚úÖ " + msg))
      .catch((err) => tg?.showAlert("‚ùå " + err.message));
  }

  return (
    <div>
      <h2 style={{ textAlign: "center" }}>–ì–µ–æ–∫–≤–µ—Å—Ç</h2>
      <MapView checkpoints={checkpoints} userPos={userPos} />
      <button onClick={() => setScanning(true)} style={{ margin: 12, padding: 10 }}>
        üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR
      </button>
      {scanning && <QrScanner onScan={handleScan} />}
    </div>
  );
}
